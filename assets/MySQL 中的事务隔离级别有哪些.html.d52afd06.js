import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as n,a as e}from"./app.6c1a7a4b.js";const t={},d=e(`<h1 id="mysql-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#mysql-事务隔离级别" aria-hidden="true">#</a> MySQL 事务隔离级别</h1><p>MySQL 提供了四种事务隔离级别，用于控制多个事务并发执行时的行为。隔离级别从低到高分别为：读未提交、读已提交、可重复读和串行化。</p><h2 id="事务并发问题" tabindex="-1"><a class="header-anchor" href="#事务并发问题" aria-hidden="true">#</a> 事务并发问题</h2><p>在了解隔离级别前，先了解事务并发可能导致的问题：</p><h3 id="脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#脏读-dirty-read" aria-hidden="true">#</a> 脏读 (Dirty Read)</h3><ul><li><strong>定义</strong>：一个事务读取到另一个事务未提交的数据</li><li><strong>示例</strong>：事务A修改数据但未提交，事务B读取了这个修改后的值，之后事务A回滚，事务B读取的数据成为&quot;脏数据&quot;</li></ul><h3 id="不可重复读-non-repeatable-read" tabindex="-1"><a class="header-anchor" href="#不可重复读-non-repeatable-read" aria-hidden="true">#</a> 不可重复读 (Non-repeatable Read)</h3><ul><li><strong>定义</strong>：同一事务内，多次读取同一数据得到不同结果</li><li><strong>示例</strong>：事务A两次读取同一行数据，但在两次读取之间，事务B修改并提交了该行数据</li></ul><h3 id="幻读-phantom-read" tabindex="-1"><a class="header-anchor" href="#幻读-phantom-read" aria-hidden="true">#</a> 幻读 (Phantom Read)</h3><ul><li><strong>定义</strong>：同一事务内，相同查询条件下，读取到了之前不存在的行</li><li><strong>示例</strong>：事务A查询某个范围的数据，事务B在该范围内插入新行并提交，事务A再次查询时发现了新行</li></ul><h2 id="四种隔离级别详解" tabindex="-1"><a class="header-anchor" href="#四种隔离级别详解" aria-hidden="true">#</a> 四种隔离级别详解</h2><h3 id="_1-读未提交-read-uncommitted" tabindex="-1"><a class="header-anchor" href="#_1-读未提交-read-uncommitted" aria-hidden="true">#</a> 1. 读未提交 (READ UNCOMMITTED)</h3><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h4><p>最低级别的隔离，允许事务读取未被其他事务提交的数据变更。</p><h4 id="可能发生的问题" tabindex="-1"><a class="header-anchor" href="#可能发生的问题" aria-hidden="true">#</a> 可能发生的问题</h4><ul><li>✅ 脏读：可能发生</li><li>✅ 不可重复读：可能发生</li><li>✅ 幻读：可能发生</li></ul><h4 id="实际开发案例" tabindex="-1"><a class="header-anchor" href="#实际开发案例" aria-hidden="true">#</a> 实际开发案例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 用于非关键数据的高并发统计场景</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token comment">-- 获取实时访问量计数，允许一定的数据不精确性</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> page_views <span class="token keyword">WHERE</span> <span class="token keyword">date</span> <span class="token operator">=</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h4><ul><li>对数据一致性要求不高的查询统计</li><li>实时报表生成</li><li>临时性数据查看</li></ul><h3 id="_2-读已提交-read-committed" tabindex="-1"><a class="header-anchor" href="#_2-读已提交-read-committed" aria-hidden="true">#</a> 2. 读已提交 (READ COMMITTED)</h3><h4 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h4><p>只允许读取已经提交的数据，是Oracle、SQL Server和PostgreSQL的默认隔离级别。</p><h4 id="可能发生的问题-1" tabindex="-1"><a class="header-anchor" href="#可能发生的问题-1" aria-hidden="true">#</a> 可能发生的问题</h4><ul><li>❌ 脏读：不会发生</li><li>✅ 不可重复读：可能发生</li><li>✅ 幻读：可能发生</li></ul><h4 id="实际开发案例-1" tabindex="-1"><a class="header-anchor" href="#实际开发案例-1" aria-hidden="true">#</a> 实际开发案例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- CRM系统中查看客户信息</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token comment">-- 每次查询都能看到最新已提交的客户信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customers <span class="token keyword">WHERE</span> customer_id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
<span class="token comment">-- 如果此时其他事务修改了客户信息并提交</span>
<span class="token comment">-- 再次查询将返回不同的结果</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> customers <span class="token keyword">WHERE</span> customer_id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1" aria-hidden="true">#</a> 适用场景</h4><ul><li>普通的查询操作</li><li>需要获取最新已提交数据的业务场景</li><li>读多写少的数据分析场景</li></ul><h3 id="_3-可重复读-repeatable-read" tabindex="-1"><a class="header-anchor" href="#_3-可重复读-repeatable-read" aria-hidden="true">#</a> 3. 可重复读 (REPEATABLE READ)</h3><h4 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2" aria-hidden="true">#</a> 概念</h4><p>MySQL的默认隔离级别，确保同一事务内多次读取同样数据返回结果一致。</p><h4 id="可能发生的问题-2" tabindex="-1"><a class="header-anchor" href="#可能发生的问题-2" aria-hidden="true">#</a> 可能发生的问题</h4><ul><li>❌ 脏读：不会发生</li><li>❌ 不可重复读：不会发生</li><li>✅ 幻读：可能发生（MySQL通过MVCC多版本并发控制和间隙锁在一定程度上解决了幻读问题）</li></ul><h4 id="实际开发案例-2" tabindex="-1"><a class="header-anchor" href="#实际开发案例-2" aria-hidden="true">#</a> 实际开发案例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 订单系统中处理订单</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询用户账户余额</span>
<span class="token keyword">SELECT</span> balance <span class="token keyword">FROM</span> accounts <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">-- 执行业务逻辑...</span>
<span class="token comment">-- 无论其他事务如何修改user_id=100的余额，此事务中再次查询仍返回相同结果</span>
<span class="token keyword">SELECT</span> balance <span class="token keyword">FROM</span> accounts <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">-- 扣减余额</span>
<span class="token keyword">UPDATE</span> accounts <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景-2" tabindex="-1"><a class="header-anchor" href="#适用场景-2" aria-hidden="true">#</a> 适用场景</h4><ul><li>银行转账系统</li><li>库存管理系统</li><li>需要事务内数据一致视图的业务场景</li></ul><h3 id="_4-串行化-serializable" tabindex="-1"><a class="header-anchor" href="#_4-串行化-serializable" aria-hidden="true">#</a> 4. 串行化 (SERIALIZABLE)</h3><h4 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3" aria-hidden="true">#</a> 概念</h4><p>最高的隔离级别，通过完全锁定读取的行，强制事务串行执行。</p><h4 id="可能发生的问题-3" tabindex="-1"><a class="header-anchor" href="#可能发生的问题-3" aria-hidden="true">#</a> 可能发生的问题</h4><ul><li>❌ 脏读：不会发生</li><li>❌ 不可重复读：不会发生</li><li>❌ 幻读：不会发生</li></ul><h4 id="实际开发案例-3" tabindex="-1"><a class="header-anchor" href="#实际开发案例-3" aria-hidden="true">#</a> 实际开发案例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 金融交易系统中的关键结算操作</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">SERIALIZABLE</span><span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询并锁定所有相关账户</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> financial_accounts <span class="token keyword">WHERE</span> transaction_date <span class="token operator">=</span> <span class="token keyword">CURRENT_DATE</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
<span class="token comment">-- 进行清算操作</span>
<span class="token keyword">UPDATE</span> financial_accounts <span class="token keyword">SET</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;SETTLED&#39;</span> <span class="token keyword">WHERE</span> transaction_date <span class="token operator">=</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景-3" tabindex="-1"><a class="header-anchor" href="#适用场景-3" aria-hidden="true">#</a> 适用场景</h4><ul><li>金融系统的关键交易</li><li>数据一致性要求极高的应用</li><li>低并发、高安全性要求的场景</li></ul><h2 id="隔离级别比较表" tabindex="-1"><a class="header-anchor" href="#隔离级别比较表" aria-hidden="true">#</a> 隔离级别比较表</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>并发性能</th><th>默认使用</th></tr></thead><tbody><tr><td>读未提交</td><td>是</td><td>是</td><td>是</td><td>最高</td><td>-</td></tr><tr><td>读已提交</td><td>否</td><td>是</td><td>是</td><td>高</td><td>Oracle, SQL Server</td></tr><tr><td>可重复读</td><td>否</td><td>否</td><td>部分解决</td><td>中等</td><td>MySQL</td></tr><tr><td>串行化</td><td>否</td><td>否</td><td>否</td><td>最低</td><td>-</td></tr></tbody></table><h2 id="设置隔离级别" tabindex="-1"><a class="header-anchor" href="#设置隔离级别" aria-hidden="true">#</a> 设置隔离级别</h2><h3 id="全局设置" tabindex="-1"><a class="header-anchor" href="#全局设置" aria-hidden="true">#</a> 全局设置</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看当前系统默认隔离级别</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@global.transaction_isolation</span><span class="token punctuation">;</span>

<span class="token comment">-- 设置全局默认隔离级别</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="会话设置" tabindex="-1"><a class="header-anchor" href="#会话设置" aria-hidden="true">#</a> 会话设置</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查看当前会话隔离级别</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@session.transaction_isolation</span><span class="token punctuation">;</span>

<span class="token comment">-- 设置当前会话隔离级别</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开发建议" tabindex="-1"><a class="header-anchor" href="#开发建议" aria-hidden="true">#</a> 开发建议</h2><ol><li><strong>默认使用可重复读</strong>：MySQL 默认的可重复读级别已经能满足大多数应用场景</li><li><strong>按需调整</strong>：高并发查询可考虑读已提交，极高安全性场景可考虑串行化</li><li><strong>避免长事务</strong>：任何隔离级别下，都应避免长时间运行的事务</li><li><strong>考虑锁机制</strong>：合理使用行锁、表锁和意向锁来控制并发访问</li><li><strong>定期监控</strong>：关注数据库锁等待和死锁情况，及时调整隔离级别或优化SQL</li></ol><hr><p><strong>注意</strong>：隔离级别越高，数据一致性保证越好，但并发性能越低。实际应用中需要根据业务需求和性能要求进行权衡选择。</p>`,58),l=[d];function i(r,o){return s(),n("div",null,l)}const k=a(t,[["render",i],["__file","MySQL 中的事务隔离级别有哪些.html.vue"]]);export{k as default};
