import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as p,b as n,d as a,e,a as t,r as i}from"./app.6c1a7a4b.js";const l={},c=t('<h1 id="_4-22腾讯cdg后台开发一面" tabindex="-1"><a class="header-anchor" href="#_4-22腾讯cdg后台开发一面" aria-hidden="true">#</a> 4.22腾讯CDG后台开发一面</h1><h3 id="_1-自我介绍" tabindex="-1"><a class="header-anchor" href="#_1-自我介绍" aria-hidden="true">#</a> 1.自我介绍</h3><h3 id="_2-介绍一下tcp协议-如何唯一确定一个tcp连接" tabindex="-1"><a class="header-anchor" href="#_2-介绍一下tcp协议-如何唯一确定一个tcp连接" aria-hidden="true">#</a> 2.介绍一下tcp协议？如何唯一确定一个tcp连接？</h3>',3),d={href:"https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html#%E4%BB%80%E4%B9%88%E6%98%AF-tcp",target:"_blank",rel:"noopener noreferrer"},h=t('<p>TCP(传输控制协议)是一种面向连接的、可靠的、基于字节流的传输层协议。它主要具有以下特点:</p><ol><li><p>面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；</p></li><li><p>可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；</p></li><li><p>字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。</p></li></ol><p>TCP 四元组可以唯一的确定一个连接，四元组包括如下：</p><ul><li>源地址</li><li>源端口</li><li>目的地址</li><li>目的端口</li></ul><h3 id="_3-http是基于什么协议" tabindex="-1"><a class="header-anchor" href="#_3-http是基于什么协议" aria-hidden="true">#</a> 3.Http是基于什么协议？</h3>',5),u={href:"https://www.xiaolincoding.com/network/2_http/http_interview.html#http-1-1-%E7%9A%84%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95",target:"_blank",rel:"noopener noreferrer"},k=t('<ul><li><p>HTTP 协议是基于 <strong>TCP/IP</strong>，并且使用了「<strong>请求 - 应答</strong>」的通信模式，所以性能的关键就在这<strong>两点</strong>里。</p></li><li><p>HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。</p></li><li><p>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！基于 UDP 的 <strong>QUIC 协议</strong> 可以实现类似 TCP 的可靠性传输</p></li></ul><h3 id="_4-为什么是三次握手-两次四次会有什么问题" tabindex="-1"><a class="header-anchor" href="#_4-为什么是三次握手-两次四次会有什么问题" aria-hidden="true">#</a> 4.为什么是三次握手，两次四次会有什么问题？</h3>',2),_={href:"https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%8F%E6%AC%A1%E5%BB%BA%E7%AB%8B-tcp-%E8%BF%9E%E6%8E%A5%E6%97%B6-%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%BA%8F%E5%88%97%E5%8F%B7%E9%83%BD%E8%A6%81%E6%B1%82%E4%B8%8D%E4%B8%80%E6%A0%B7%E5%91%A2",target:"_blank",rel:"noopener noreferrer"},g=t('<p>首先看两次，三次，四次分别是什么？</p><p>两次握手：</p><ul><li>A发送同步信号SYN+A的初始序列号</li><li>B发送同步信号SYN+B的初始序列号+B的ACK序列号</li></ul><p>三次握手：</p><ul><li>A发送同步信号SYN+A的初始序列号</li><li>B确认收到A的SYN,发送SYN+B的初始序列号 + B的ACK序列号(确认A的序列号)</li><li>A确认收到B的SYN+ACK,发送ACK报文</li></ul><p>四次握手：</p><ul><li>A发送同步信号SYN+A的初始序列号</li><li>B确认收到A的同步信号，并记录A的ISN到本地，命名B的ACK序列号</li><li>B发送同步信号SYN+B的初始序列号</li><li>A确认收到B的同步信号，并记录B的ISN到本地，命名A的ACK序列号</li></ul><p>TCP 建立连接时，通过三次握手<strong>能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号</strong>。序列号能够保证数据包不重复、不丢弃和按序传输。</p><p>不使用「两次握手」和「四次握手」的原因：</p><ul><li>「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；</li><li>「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</li></ul><h3 id="_5-什么是ioc" tabindex="-1"><a class="header-anchor" href="#_5-什么是ioc" aria-hidden="true">#</a> 5.什么是IOC？</h3>',11),b={href:"https://javaguide.cn/system-design/framework/spring/ioc-and-aop.html#%E4%BB%80%E4%B9%88%E6%98%AF-ioc",target:"_blank",rel:"noopener noreferrer"},m=t('<p>IOC(Inversion of Control,控制反转)是一种设计模式,它颠覆了传统的代码编写方式,将对象的创建和依赖管理的控制权从程序本身转移到外部容器(如框架或库)。是一种思想不是一个技术实现。</p><p>IOC 的核心思想是:</p><ol><li>创建对象的控制权不在程序内部,而是交由外部容器负责。</li><li>对象之间的依赖关系也由外部容器来管理,程序不需要自己管理依赖。</li></ol><p>例如：现有类 A 依赖于类 B</p><ul><li><strong>传统的开发方式</strong> ：往往是在类 A 中手动通过 new 关键字来 new 一个 B 的对象出来</li><li><strong>使用 IoC 思想的开发方式</strong> ：不通过 new 关键字来创建对象，而是通过 IoC 容器(Spring 框架) 来帮助我们实例化对象。我们需要哪个对象，直接从 IoC 容器里面去取即可。</li></ul><p><strong>为什么叫控制反转?</strong></p><ul><li><strong>控制</strong> ：指的是对象创建（实例化、管理）的权力</li><li><strong>反转</strong> ：控制权交给外部环境（IoC 容器）</li></ul><h3 id="_6-spring在容器启动阶段会做什么" tabindex="-1"><a class="header-anchor" href="#_6-spring在容器启动阶段会做什么" aria-hidden="true">#</a> 6.Spring在容器启动阶段会做什么？</h3>',8),B={href:"https://developer.aliyun.com/article/1350979",target:"_blank",rel:"noopener noreferrer"},f={href:"https://so.csdn.net/so/search?q=%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"创建容器：Spring容器启动后会创建一个容器实例，容器负责管理bean的生命周期和依赖关系。",-1),A=n("li",null,"扫描包并创建bean定义：Spring容器会扫描指定的包路径，自动创建包中标注了@Component、@Service、@Controller、@Repository等注解的类的bean定义。",-1),E=n("li",null,"解析依赖关系：Spring容器会根据bean定义中的依赖关系，自动将依赖的bean注入到需要的bean中。",-1),x=n("li",null,"初始化bean：容器会按照指定的顺序依次对bean进行初始化，包括实例化、属性注入、初始化方法执行等。",-1),S=n("li",null,"设置代理对象：如果bean需要被AOP切面增强，则容器会为其创建代理对象。",-1),w=n("li",null,"完成容器初始化：所有bean初始化完成后，Spring容器启动完成。",-1),C=n("h3",{id:"_7-bean定义和依赖定义有哪些方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-bean定义和依赖定义有哪些方式","aria-hidden":"true"},"#"),a(" 7.Bean定义和依赖定义有哪些方式？")],-1),T={href:"https://developer.aliyun.com/article/988786",target:"_blank",rel:"noopener noreferrer"},P=t('<p>有三种方式：<strong>直接编码方式</strong>、<strong>配置文件方式</strong>、<strong>注解方式</strong>。</p><ul><li>直接编码方式：我们一般接触不到直接编码的方式，但其实其它的方式最终都要通过直接编码来实现。</li><li>配置文件方式：通过xml、propreties类型的配置文件，配置相应的依赖关系，Spring读取配置文件，完成依赖关系的注入。</li><li>注解方式：注解方式应该是我们用的最多的一种方式了，在相应的地方使用注解修饰，Spring会扫描注解，完成依赖关系的注入。</li></ul><h3 id="_8-有哪些依赖注入的方法" tabindex="-1"><a class="header-anchor" href="#_8-有哪些依赖注入的方法" aria-hidden="true">#</a> 8.有哪些依赖注入的方法？</h3><p>Spring支持<strong>构造方法注入</strong>、<strong>Setter注入</strong>、<strong>属性注入</strong>、<strong>工厂方法注入</strong>,其中工厂方法注入，又可以分为<strong>静态工厂方法注入</strong>和<strong>非静态工厂方法注入</strong>。</p><h3 id="_9-spring的bean的作用域有哪些-几种在web应用中使用的作用域-了解吗" tabindex="-1"><a class="header-anchor" href="#_9-spring的bean的作用域有哪些-几种在web应用中使用的作用域-了解吗" aria-hidden="true">#</a> 9.Spring的Bean的作用域有哪些？几种在web应用中使用的作用域，了解吗？</h3><p>Spring Bean支持作用域</p><ul><li><strong>singleton</strong> : 在Spring容器仅存在一个Bean实例，Bean以单实例的方式存在，是Bean默认的作用域。</li><li><strong>prototype</strong> : 每次从容器重调用Bean时，都会返回一个新的实例。</li></ul><p>以下三个作用域于只在Web应用中适用：</p><ul><li>​ <strong>request</strong> : 每一次HTTP请求都会产生一个新的Bean，该Bean仅在当前HTTP Request内有效。</li><li>​ <strong>session</strong> : 同一个HTTP Session共享一个Bean，不同的HTTP Session使用不同的Bean。</li><li>​ <strong>globalSession</strong>：同一个全局Session共享一个Bean，只用于基于Protlet的Web应用，Spring5中已经不存在了。</li></ul><h3 id="_10-spring中的单例bean会存在线程安全问题吗" tabindex="-1"><a class="header-anchor" href="#_10-spring中的单例bean会存在线程安全问题吗" aria-hidden="true">#</a> 10.Spring中的单例Bean会存在线程安全问题吗？</h3><p>首先结论在这：Spring中的单例Bean<strong>不是线程安全的</strong>。</p><p>因为单例Bean，是全局只有一个Bean，所有线程共享。如果说单例Bean，是一个无状态的，也就是线程中的操作不会对Bean中的成员变量执行<strong>查询</strong>以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p><p>假如这个Bean是有状态的，也就是会对Bean中的成员变量进行写操作，那么可能就存在线程安全的问题。</p><blockquote><p>解决办法：</p><ol><li>将Bean定义为多例这样每一个线程请求过来都会创建一个新的Bean，但是这样容器就不好管理Bean，不能这么办。</li><li>在Bean对象中尽量避免定义可变的成员变量削足适履了属于是，也不能这么干。</li><li>将Bean中的成员变量保存在ThreadLocal中⭐我们知道ThredLoca能保证多线程下变量的隔离，可以在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal里，这是推荐的一种方式。</li></ol></blockquote><h3 id="_11-spring中循环依赖问题了解过吗" tabindex="-1"><a class="header-anchor" href="#_11-spring中循环依赖问题了解过吗" aria-hidden="true">#</a> 11.Spring中循环依赖问题了解过吗？</h3><h3 id="_12-循环依赖问题会发生在哪些spring作用域中" tabindex="-1"><a class="header-anchor" href="#_12-循环依赖问题会发生在哪些spring作用域中" aria-hidden="true">#</a> 12.循环依赖问题会发生在哪些Spring作用域中？</h3><h3 id="_13-一定要三级缓存吗-两级不行吗" tabindex="-1"><a class="header-anchor" href="#_13-一定要三级缓存吗-两级不行吗" aria-hidden="true">#</a> 13.一定要三级缓存吗，两级不行吗？</h3><h3 id="_14-aop了解过吗-这样做有什么好处" tabindex="-1"><a class="header-anchor" href="#_14-aop了解过吗-这样做有什么好处" aria-hidden="true">#</a> 14.AOP了解过吗？这样做有什么好处？</h3><h3 id="_15-aop的实现是动态代理-那你知道spring中的aop是怎么实现的吗" tabindex="-1"><a class="header-anchor" href="#_15-aop的实现是动态代理-那你知道spring中的aop是怎么实现的吗" aria-hidden="true">#</a> 15.AOP的实现是动态代理，那你知道Spring中的AOP是怎么实现的吗？</h3><h3 id="_16-jdk动态代理和cglib动态代理分别怎么选择" tabindex="-1"><a class="header-anchor" href="#_16-jdk动态代理和cglib动态代理分别怎么选择" aria-hidden="true">#</a> 16.JDK动态代理和CGLib动态代理分别怎么选择?</h3><h3 id="_17-spring的事务有哪些-声明式事务和编程式事务深入了解过吗-————没深入了解过-pass跳过" tabindex="-1"><a class="header-anchor" href="#_17-spring的事务有哪些-声明式事务和编程式事务深入了解过吗-————没深入了解过-pass跳过" aria-hidden="true">#</a> 17.Spring的事务有哪些？声明式事务和编程式事务深入了解过吗？————没深入了解过，pass跳过</h3><h3 id="_18-java对象创建的过程了解吗" tabindex="-1"><a class="header-anchor" href="#_18-java对象创建的过程了解吗" aria-hidden="true">#</a> 18.Java对象创建的过程了解吗？</h3><h3 id="_19-有听过指针碰撞吗" tabindex="-1"><a class="header-anchor" href="#_19-有听过指针碰撞吗" aria-hidden="true">#</a> 19.有听过指针碰撞吗？</h3><h3 id="_20-如果你来设计一门语言-你觉得gc要做哪些事" tabindex="-1"><a class="header-anchor" href="#_20-如果你来设计一门语言-你觉得gc要做哪些事" aria-hidden="true">#</a> 20.如果你来设计一门语言，你觉得GC要做哪些事？</h3><h3 id="_21-redis在实际项目中使用过吗-什么场景下用的" tabindex="-1"><a class="header-anchor" href="#_21-redis在实际项目中使用过吗-什么场景下用的" aria-hidden="true">#</a> 21.Redis在实际项目中使用过吗，什么场景下用的？</h3><h3 id="_22-在什么场景下需要使用分布式锁" tabindex="-1"><a class="header-anchor" href="#_22-在什么场景下需要使用分布式锁" aria-hidden="true">#</a> 22.在什么场景下需要使用分布式锁？</h3><h3 id="_23-redis有哪些常用数据结构-底层分别怎么实现" tabindex="-1"><a class="header-anchor" href="#_23-redis有哪些常用数据结构-底层分别怎么实现" aria-hidden="true">#</a> 23.Redis有哪些常用数据结构，底层分别怎么实现？</h3><h3 id="_24-粉丝点赞排行榜怎么实现-zset的函数使用使用过吗-具体点score存什么" tabindex="-1"><a class="header-anchor" href="#_24-粉丝点赞排行榜怎么实现-zset的函数使用使用过吗-具体点score存什么" aria-hidden="true">#</a> 24.粉丝点赞排行榜怎么实现？zset的函数使用使用过吗？具体点score存什么？</h3><h3 id="_25-听说过延迟队列吗" tabindex="-1"><a class="header-anchor" href="#_25-听说过延迟队列吗" aria-hidden="true">#</a> 25.听说过延迟队列吗?</h3><h3 id="_26-如何通过redis实现分布式锁-底层讲讲-穿插一些项目中redis的使用" tabindex="-1"><a class="header-anchor" href="#_26-如何通过redis实现分布式锁-底层讲讲-穿插一些项目中redis的使用" aria-hidden="true">#</a> 26.如何通过Redis实现分布式锁，底层讲讲？穿插一些项目中redis的使用</h3><h3 id="_27-mysql有哪些常用存储引擎-myisam和innodb在主键上有区别吗-在count方法执行上有区别吗" tabindex="-1"><a class="header-anchor" href="#_27-mysql有哪些常用存储引擎-myisam和innodb在主键上有区别吗-在count方法执行上有区别吗" aria-hidden="true">#</a> 27.MySQL有哪些常用存储引擎？MyISAM和InnoDB在主键上有区别吗？在count方法执行上有区别吗？</h3><h3 id="_28-聚簇索引和非聚簇索引-为什么要用b-树" tabindex="-1"><a class="header-anchor" href="#_28-聚簇索引和非聚簇索引-为什么要用b-树" aria-hidden="true">#</a> 28.聚簇索引和非聚簇索引？为什么要用B+树？</h3><h3 id="_29-有了解过意向锁吗" tabindex="-1"><a class="header-anchor" href="#_29-有了解过意向锁吗" aria-hidden="true">#</a> 29.有了解过意向锁吗？</h3><h3 id="_30-挑一个有挑战的项目聊聊" tabindex="-1"><a class="header-anchor" href="#_30-挑一个有挑战的项目聊聊" aria-hidden="true">#</a> 30.挑一个有挑战的项目聊聊?</h3><h3 id="_31-手撕-两个有序数组合并为一个有序数组" tabindex="-1"><a class="header-anchor" href="#_31-手撕-两个有序数组合并为一个有序数组" aria-hidden="true">#</a> 31.手撕：两个有序数组合并为一个有序数组</h3>',35),y={href:"https://leetcode.cn/problems/merge-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        m<span class="token operator">--</span><span class="token punctuation">,</span>n<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span>m<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>cur<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span>n<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>nums1<span class="token punctuation">[</span>cur<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&gt;=</span>nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>cur<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> nums1<span class="token punctuation">[</span>cur<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_32-反问" tabindex="-1"><a class="header-anchor" href="#_32-反问" aria-hidden="true">#</a> 32.反问?</h3>`,2);function D(N,H){const s=i("ExternalLinkIcon");return r(),p("div",null,[c,n("p",null,[n("a",d,[a("参考链接"),e(s)])]),h,n("p",null,[n("a",u,[a("参考链接"),e(s)])]),k,n("p",null,[n("a",_,[a("参考连接"),e(s)])]),g,n("p",null,[n("a",b,[a("参考链接"),e(s)])]),m,n("p",null,[n("a",B,[a("参考链接"),e(s)])]),n("ol",null,[n("li",null,[a("加载配置文件：Spring容器会从指定的配置文件中读取配置信息，包括bean的定义、"),n("a",f,[a("依赖关系"),e(s)]),a("、AOP切面等。")]),v,A,E,x,S,w]),C,n("p",null,[n("a",T,[a("参考链接"),e(s)])]),P,n("p",null,[n("a",y,[a("题目链接"),e(s)])]),I])}const Y=o(l,[["render",D],["__file","2024.4.22腾讯CDG后台开发一面.html.vue"]]);export{Y as default};
