import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,b as n,d as a,e as t,a as s,r as i}from"./app.6c1a7a4b.js";const l={},u=s(`<h1 id="_2024-05-09瑞幸java校招一面" tabindex="-1"><a class="header-anchor" href="#_2024-05-09瑞幸java校招一面" aria-hidden="true">#</a> 2024.05.09瑞幸Java校招一面</h1><h3 id="算法题" tabindex="-1"><a class="header-anchor" href="#算法题" aria-hidden="true">#</a> 算法题</h3><blockquote><p>限时十五分钟，给一个字符串n（长度不超过100），和数字m，取出所有可能的字符串组合，如输入abc和2，输出ab,ac,bc,ba,ca,cb</p></blockquote><p>DFS回溯，u表示当前是第几层</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
string res<span class="token punctuation">,</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&gt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>
    n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入输出流设计模式" tabindex="-1"><a class="header-anchor" href="#输入输出流设计模式" aria-hidden="true">#</a> 输入输出流设计模式</h2><blockquote><p>如果实现实现一个Java的输入输出流，你会用什么设计模式</p></blockquote>`,7),r={href:"https://blog.csdn.net/qq_30507459/article/details/105223817",target:"_blank",rel:"noopener noreferrer"},k=s(`<blockquote><p>装饰器模式(Decorator Pattern)是一种结构型设计模式,它允许在运行时动态地给一个对象添加新的功能,而不改变其原有的结构。</p><p>装饰器模式的主要特点如下:</p><ol><li><p>动态地给一个对象添加额外的功能:通过包装对象的方式来扩展对象的功能,而不是通过继承的方式。</p></li><li><p>避免创建大量子类:如果需要为基础类添加许多额外功能,通过继承会导致类爆炸。装饰器模式可以避免这种情况。</p></li><li><p>保持对象的核心功能不变:装饰器只是在原有功能的基础上添加新的功能,而不会修改对象的基本功能。</p></li><li><p>装饰器和被装饰对象实现相同的接口:这样装饰器可以透明地替换被装饰的对象。</p></li></ol><p>装饰器模式的主要结构包括:</p><ol><li>抽象组件(Component)接口:定义了对象的基本功能。</li><li>具体组件(ConcreteComponent)类:实现了抽象组件接口。</li><li>抽象装饰器(Decorator)类:继承或实现了抽象组件接口,并包含了对组件的引用。</li><li>具体装饰器(ConcreteDecorator)类:扩展抽象装饰器,添加了额外的功能。</li></ol><p>通过使用装饰器模式,我们可以在不修改现有类的情况下,灵活地向对象添加新的功能。这种模式提高了代码的可扩展性和可维护性。</p></blockquote><p>Java的IO流分为两类：</p><ul><li>字节流：传输数据的最小单位为byte(字节)InputStream和OutputStream</li><li>字符流：传输数据的最小单位char(字符)Reader和Writer</li></ul><p>BufferedInputStream是一个具体装饰者。FileInputStream就是一个具体组件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LowerCaseInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">LowerCaseInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> read<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LowerCaseInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java的双亲委派机制" tabindex="-1"><a class="header-anchor" href="#java的双亲委派机制" aria-hidden="true">#</a> Java的双亲委派机制</h3><p>双亲委派机制（Parent Delegation Mechanism）是Java中的一种类加载机制。在Java中，类加载器负责加载类的字节码并创建对应的Class对象。双亲委派机制是指当一个类加载器收到类加载请求时，它会先将该请求委派给它的父类加载器去尝试加载。只有当父类加载器无法加载该类时，子类加载器才会尝试加载。</p><p>这种机制的设计目的是为了保证类的加载是有序的，避免重复加载同一个类。Java中的类加载器形成了一个层次结构，根加载器（Bootstrap ClassLoader）位于最顶层，它负责加载Java核心类库。其他加载器如扩展类加载器（Extension ClassLoader）和应用程序类加载器（Application ClassLoader）都有各自的加载范围和职责。通过双亲委派机制，可以确保类在被加载时，先从上层的加载器开始查找，逐级向下，直到找到所需的类或者无法找到为止。</p><p>这种机制的好处是可以避免类的重复加载，提高了类加载的效率和安全性。同时，它也为Java提供了一种扩展机制，允许开发人员自定义类加载器，实现特定的加载策略。</p><h3 id="垃圾回收器g1有没有了解-如何实现的" tabindex="-1"><a class="header-anchor" href="#垃圾回收器g1有没有了解-如何实现的" aria-hidden="true">#</a> 垃圾回收器G1有没有了解，如何实现的</h3><p>G1（Garbage First）收集器是 JDK7 提供的一个新收集器，在 JDK9 中更被指定为官方GC收集器，与CMS收集器相比，最突出的改进是：</p><ul><li>基于 “标记-整理” 算法，收集后不会产生内存碎片。</li><li>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</li></ul><p>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p><h3 id="springboot启动时有哪些步骤" tabindex="-1"><a class="header-anchor" href="#springboot启动时有哪些步骤" aria-hidden="true">#</a> Springboot启动时有哪些步骤</h3>`,14),d={href:"https://cloud.baidu.com/article/3299969",target:"_blank",rel:"noopener noreferrer"},v=s('<ol><li>初始化SpringApplication对象</li><li>加载配置文件</li><li>创建并配置ApplicationContext</li><li>注册并扫描Bean定义</li><li>运行Runner</li><li>启动Web服务器</li><li>显示启动信息</li></ol><h3 id="spring的aop是如何实现的" tabindex="-1"><a class="header-anchor" href="#spring的aop是如何实现的" aria-hidden="true">#</a> Spring的AOP是如何实现的</h3><p>Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理</p><h3 id="除了volatile关键字防止指令重排序还有哪些办法" tabindex="-1"><a class="header-anchor" href="#除了volatile关键字防止指令重排序还有哪些办法" aria-hidden="true">#</a> 除了volatile关键字防止指令重排序还有哪些办法</h3><p>在 Java 中，我们可以使用 volatile 关键字和 synchronized 关键字来禁止指令重排，并实现多线程之间对变量的可见性和有序性的保证</p><h3 id="concurrenthashmap如何保证线程安全" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap如何保证线程安全" aria-hidden="true">#</a> ConcurrentHashMap如何保证线程安全</h3><p>ConcurrentHashMap 在 JDK 1.7 时，使用的是分段锁也就是 Segment 来实现线程安全的。 然而它在 JDK 1.8 之后，使用的是 CAS + synchronized 或 CAS + volatile 来实现线程安全的。</p><h3 id="如果hashmap里有100万条数据-remove掉90万条-hashmap的数组会不会变小" tabindex="-1"><a class="header-anchor" href="#如果hashmap里有100万条数据-remove掉90万条-hashmap的数组会不会变小" aria-hidden="true">#</a> 如果HashMap里有100万条数据，remove掉90万条，HashMap的数组会不会变小</h3><p>不会变小，这是因为HashMap的设计目的是尽量避免频繁的内部数组大小调整,以提高性能。HashMap会在需要时自动调整其内部数组的大小,以保持合理的装载因子(load factor)。可以手动调用HashMap.trimToSize()方法,HashMap会尝试收缩内部数组的大小,以匹配当前元素的数量。</p><h3 id="三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#三次握手和四次挥手" aria-hidden="true">#</a> 三次握手和四次挥手</h3><p>三次握手：</p><ol><li>客户端向服务端发送初始化序列化+SYN报文</li><li>服务端收到后发送ACK+SYN+服务端初始化序列号+(客户端初始化序列号+1)给客户端</li><li>客户端发送(服务端初始化序列号+1)+SYN给服务端</li></ol><p>四次挥手：</p><ol><li>客户端发送FIN报文，表示希望关闭连接</li><li>服务器收到FIN，发送ACK，告知准备关闭连接</li><li>服务器发送FIN，表示数据传输完成，希望关闭连接</li><li>客户端发送ACK，告知关闭连接</li></ol>',14);function m(h,b){const p=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[a("装饰者模式："),n("a",r,[a("CSDN"),t(p)])]),k,n("p",null,[n("a",d,[a("参考链接"),t(p)])]),v])}const w=e(l,[["render",m],["__file","2024.05.09瑞幸Java校招一面.html.vue"]]);export{w as default};
