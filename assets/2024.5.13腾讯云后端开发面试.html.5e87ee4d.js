import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as i,b as n,d as e,e as o,a,r as p}from"./app.6c1a7a4b.js";const c={},r=a(`<h1 id="_2024-5-13腾讯云后端开发面试" tabindex="-1"><a class="header-anchor" href="#_2024-5-13腾讯云后端开发面试" aria-hidden="true">#</a> 2024.5.13腾讯云后端开发面试</h1><h3 id="_1、线程池-七个参数-如果任务队列无界的话-则最大线程数还用得到吗" tabindex="-1"><a class="header-anchor" href="#_1、线程池-七个参数-如果任务队列无界的话-则最大线程数还用得到吗" aria-hidden="true">#</a> 1、线程池 七个参数 如果任务队列无界的话 则最大线程数还用得到吗</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 用给定的初始参数创建一个新的ThreadPoolExecutor。
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span><span class="token comment">//线程池的核心线程数量</span>
                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span><span class="token comment">//线程池的最大线程数</span>
                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span><span class="token comment">//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span>
                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span><span class="token comment">//时间单位</span>
                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span><span class="token comment">//任务队列，用来储存等待执行任务的队列</span>
                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span><span class="token comment">//线程工厂，用来创建线程，一般默认即可</span>
                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token comment">//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span>
                           <span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果任务队列是无界的(使用 LinkedBlockingQueue 无参构造函数)的话,那么 maximumPoolSize 就不再重要了,因为:</p><ul><li>当有新任务来时,线程池首先会尝试将任务添加到无界队列中。</li><li>如果队列已满,才会尝试创建新线程。</li><li>但由于队列无界,所以永远不会出现队列满的情况,因此 maximumPoolSize 也就不会生效了。</li></ul><h3 id="_2、java内存模型" tabindex="-1"><a class="header-anchor" href="#_2、java内存模型" aria-hidden="true">#</a> 2、Java内存模型</h3><p>JMM(Java 内存模型)主要定义了对于一个共享变量，当另一个线程对这个共享变量执行写操作后，这个线程对这个共享变量的可见性。</p><p>JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。</p><h3 id="_2、类加载过程-双亲委派机制" tabindex="-1"><a class="header-anchor" href="#_2、类加载过程-双亲委派机制" aria-hidden="true">#</a> 2、类加载过程（双亲委派机制）</h3><p>类加载过程</p><ol><li><strong>加载（Loading）</strong>： 加载是指将类的字节码文件加载到内存中。在加载阶段，JVM会完成以下几件事情：</li></ol><ul><li><ul><li>通过类的全限定名获取类的二进制字节流。</li><li>将字节流代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表该类的 Class 对象，作为方法区这个类的各种数据的访问入口。</li></ul></li></ul><ol start="2"><li><strong>链接（Linking）</strong>： 链接阶段包括三个步骤：验证、准备和解析。</li></ol><ul><li><ul><li><strong>验证（Verification）</strong>：确保加载的类符合 JVM 规范，比如检查字节码是否符合规范、类是否有父类等。</li><li><strong>准备（Preparation）</strong>：为类的静态变量分配内存，并将其初始化为默认值。</li><li><strong>解析（Resolution）</strong>：将符号引用转换为直接引用，即将常量池中的符号引用替换为直接指针，确保各个类之间的关联正常。</li></ul></li></ul><ol start="3"><li><strong>初始化（Initialization）</strong>： 初始化阶段是类加载过程的最后一步，在这个阶段，JVM会执行类构造器<code> &lt;clinit&gt;</code>方法的过程。这个方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。当类被主动使用时，JVM才会进行类的初始化，例如实例化对象、访问类的静态方法或静态字段。</li></ol><p>双亲委派机制：一个类加载器需要加载一个类时，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最 终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无 法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。优点如下：</p><ul><li>避免重复加载</li><li>安全</li></ul><h3 id="_3、新生代-ed、fs、ts-、老生代-垃圾回收-cms" tabindex="-1"><a class="header-anchor" href="#_3、新生代-ed、fs、ts-、老生代-垃圾回收-cms" aria-hidden="true">#</a> 3、新生代（Ed、FS、TS）、老生代（垃圾回收：CMS）</h3><p>Java 的对象是在堆中创建的，但堆又分为新生代（存放使用后就要被回收的对象）和老年代（存放生命周期比较长的对象），新生代又细分为 Eden、From Survivor、To Survivor。</p><ul><li><p>随着对象的不断创建，Eden 剩余地内存空间就会越来越少，随后就会触发 Minor GC，于是 JVM 会把 Eden 区存活的对象转入 From Survivor 空间。</p></li><li><p>触发 Minor GC的时候，JVM 会对 Eden 区和 From Survivor 区中的对象进行存活判断，对于存活的对象，会转移到 To Survivor 区。</p></li><li><p>下一次 Minor GC，存活的对象又会从 To 到 From，这样就总有一个 Survivor 区是空的，而另外一个是无碎片的。</p></li></ul><p>大对象直接进入老年代：如果一个对象很大，一直在 Survivor 空间复制来复制去，就会很浪费性能，所以这些大对象会直接进入老年代。</p><p>长期存活的对象将进入老年代：对象在每次从一个 Survivor 区转移到另外一个 Survivor 区时，它的年龄就会增加。当对象的年龄达到一定阈值（默认为 15），则它会被转移到老年代。</p>`,22),u={href:"https://javaguide.cn/java/jvm/jvm-garbage-collection.html#cms-%E6%94%B6%E9%9B%86%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},d=a('<p>CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的,整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><h3 id="_4、mysql的存储引擎-innodb" tabindex="-1"><a class="header-anchor" href="#_4、mysql的存储引擎-innodb" aria-hidden="true">#</a> 4、mysql的存储引擎 （innodb）</h3><ol><li><p>InnoDB 支持事务MyISAM 不支持；</p></li><li><p>InnoDB 支持外键；</p></li><li><p>InnoDB 是聚集索引，MyISAM 是非聚集索引等。</p></li></ol><p>这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一</p><h3 id="_5、mysql-的主键索引-和-唯一索引-覆盖索引" tabindex="-1"><a class="header-anchor" href="#_5、mysql-的主键索引-和-唯一索引-覆盖索引" aria-hidden="true">#</a> 5、mysql 的主键索引 和 唯一索引 （覆盖索引）</h3><ul><li>主键索引：聚簇索引,也就是说数据行本身存储在主键索引的叶子节点上</li><li>唯一索引：索引中的所有值都互不相同，允许有 NULL 值</li><li>覆盖索引：查询语句的所有列都包含在索引中,这样可以直接从索引中获取数据,不需要再访问数据行。避免了&quot;回表&quot;操作</li></ul><h3 id="_6、索引的数据结构-hash-平衡树-b-树-b树" tabindex="-1"><a class="header-anchor" href="#_6、索引的数据结构-hash-平衡树-b-树-b树" aria-hidden="true">#</a> 6、索引的数据结构 hash 平衡树 B+树 B树</h3><ul><li>Hash查询O(1)，但是不适合范围查询</li><li>平衡树查询O(logn)，但是不适合范围查询，并且树高度相对B树较高</li><li>B树不适合范围查询，并且非叶子结点也要存储数据，占用大</li><li>B+树，innodb的索引结构，可以范围查询，高度3-4，磁盘IO少。</li></ul><h3 id="_7、http2-与-http3区别" tabindex="-1"><a class="header-anchor" href="#_7、http2-与-http3区别" aria-hidden="true">#</a> 7、HTTP2 与 HTTP3区别</h3>',10),k={href:"https://javaguide.cn/cs-basics/network/other-network-questions.html#http-1-1-%E5%92%8C-http-2-0-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},h=a('<ul><li><strong>传输协议</strong>：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。你可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等。HTTP/3.0 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</li><li><strong>连接建立</strong>：HTTP/2.0 需要经过经典的 TCP 三次握手过程（由于安全的 HTTPS 连接建立还需要 TLS 握手，共需要大约 3 个 RTT）。由于 QUIC 协议的特性（TLS 1.3，TLS 1.3 除了支持 1 个 RTT 的握手，还支持 0 个 RTT 的握手）连接建立仅需 0-RTT 或者 1-RTT。这意味着 QUIC 在最佳情况下不需要任何的额外往返时间就可以建立新连接。</li><li><strong>队头阻塞</strong>：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞（Head-of-Line blocking, 简写：HOL blocking）问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。</li><li><strong>错误恢复</strong>：HTTP/3.0 具有更好的错误恢复机制，当出现丢包、延迟等网络问题时，可以更快地进行恢复和重传。而 HTTP/2.0 则需要依赖于 TCP 的错误恢复机制。</li><li><strong>安全性</strong>：HTTP/2.0 和 HTTP/3.0 在安全性上都有较高的要求，支持加密通信，但在实现上有所不同。HTTP/2.0 使用 TLS 协议进行加密，而 HTTP/3.0 基于 QUIC 协议，包含了内置的加密和身份验证机制，可以提供更强的安全性。</li></ul><h3 id="_8、为什么要用kafka" tabindex="-1"><a class="header-anchor" href="#_8、为什么要用kafka" aria-hidden="true">#</a> 8、为什么要用kafka</h3><p>Kafka 是一个分布式流式处理平台。流平台具有三个关键功能：</p><ol><li><strong>消息队列</strong>：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。</li><li><strong>容错的持久方式存储记录消息流</strong>：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。</li><li><strong>流式处理平台：</strong> 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。</li></ol><p>Kafka 主要有两大应用场景：</p><ol><li><strong>消息队列</strong>：建立实时流数据管道，以可靠地在系统或应用程序之间获取数据。</li><li><strong>数据处理：</strong> 构建实时的流数据处理程序来转换或处理数据流。</li></ol><h3 id="_9、jvm锁机制-怎么样判断一个对象有没有被锁住" tabindex="-1"><a class="header-anchor" href="#_9、jvm锁机制-怎么样判断一个对象有没有被锁住" aria-hidden="true">#</a> 9、JVM锁机制 怎么样判断一个对象有没有被锁住</h3><p>为了判断一个对象是否被锁着，我们可以尝试获取该对象的锁。如果能够成功获取到锁，说明对象没有被锁着；反之，如果获取锁失败，则说明对象已经被锁定。</p><h3 id="_10、undolog-binlog-redolog是干啥的-执行顺序" tabindex="-1"><a class="header-anchor" href="#_10、undolog-binlog-redolog是干啥的-执行顺序" aria-hidden="true">#</a> 10、undolog binlog redolog是干啥的 执行顺序</h3><ul><li>undolog回滚日志，记录事务开始前的状态，记录相反操作，用于实现事务回滚，保证原子性。实现MVCC。</li><li>redolog重做日志，记录事务完成后的状态，物理日志记录，用于断电恢复</li><li>binlog归档日志，记录数据库所有变更，实现主从复制，数据库备份</li></ul><p>顺序：</p><ol><li>事务开始 -&gt; 将修改前的数据写入undolog</li><li>执行事务操作,修改数据</li><li>事务提交 -&gt; 将修改后的数据写入redolog和binlog</li></ol><h3 id="算法-买卖股票" tabindex="-1"><a class="header-anchor" href="#算法-买卖股票" aria-hidden="true">#</a> 算法：买卖股票</h3>',13),m={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token operator">=</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function g(b,_){const s=p("ExternalLinkIcon");return l(),i("div",null,[r,n("p",null,[n("a",u,[e("javaguide"),o(s)])]),d,n("p",null,[n("a",k,[e("Javaguide"),o(s)])]),h,n("p",null,[n("a",m,[e("121. 买卖股票的最佳时机"),o(s)])]),v])}const P=t(c,[["render",g],["__file","2024.5.13腾讯云后端开发面试.html.vue"]]);export{P as default};
