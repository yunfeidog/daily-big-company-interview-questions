const e=JSON.parse('{"key":"v-32eacd2b","path":"/backEnd/MySQL/%E4%B8%BA%E4%BB%80%E4%B9%88%20MySQL%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8%20B+%E6%A0%91%E4%BD%9C%E4%B8%BA%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.html","title":"为什么 MySQL选择使用 B+树作为索引结构?","lang":"zh-CN","frontmatter":{"title":"为什么 MySQL选择使用 B+树作为索引结构?","date":"2025年3月31日","tag":["后端","MySQL"],"description":"B+树的基本结构 B+树是一种多路平衡查找树，它由B树演变而来。在B+树中： 所有数据记录都存储在叶子节点上; 非叶子节点只存储键值和指针，不存储数据; 所有叶子节点通过指针连接成一个单向链表; 树的高度通常较低，一般为2-4层; 与其他数据结构的比较 相比B树 B+树所有数据都在叶子节点，非叶子节点不存储数据，更适合磁盘存储; B+树叶子节点相互链接...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/daily-big-company-interview-questions/backEnd/MySQL/%E4%B8%BA%E4%BB%80%E4%B9%88%20MySQL%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8%20B+%E6%A0%91%E4%BD%9C%E4%B8%BA%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"每日大厂面试题分享"}],["meta",{"property":"og:title","content":"为什么 MySQL选择使用 B+树作为索引结构?"}],["meta",{"property":"og:description","content":"B+树的基本结构 B+树是一种多路平衡查找树，它由B树演变而来。在B+树中： 所有数据记录都存储在叶子节点上; 非叶子节点只存储键值和指针，不存储数据; 所有叶子节点通过指针连接成一个单向链表; 树的高度通常较低，一般为2-4层; 与其他数据结构的比较 相比B树 B+树所有数据都在叶子节点，非叶子节点不存储数据，更适合磁盘存储; B+树叶子节点相互链接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2025-03-31T16:24:25.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:modified_time","content":"2025-03-31T16:24:25.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"B+树的基本结构","slug":"b-树的基本结构","link":"#b-树的基本结构","children":[]},{"level":2,"title":"与其他数据结构的比较","slug":"与其他数据结构的比较","link":"#与其他数据结构的比较","children":[{"level":3,"title":"相比B树","slug":"相比b树","link":"#相比b树","children":[]},{"level":3,"title":"相比红黑树","slug":"相比红黑树","link":"#相比红黑树","children":[]},{"level":3,"title":"相比哈希表","slug":"相比哈希表","link":"#相比哈希表","children":[]}]},{"level":2,"title":"磁盘IO优化","slug":"磁盘io优化","link":"#磁盘io优化","children":[]},{"level":2,"title":"顺序访问性能","slug":"顺序访问性能","link":"#顺序访问性能","children":[]},{"level":2,"title":"空间利用率","slug":"空间利用率","link":"#空间利用率","children":[]},{"level":2,"title":"缓存友好性","slug":"缓存友好性","link":"#缓存友好性","children":[]},{"level":2,"title":"并发控制","slug":"并发控制","link":"#并发控制","children":[]},{"level":2,"title":"实际性能表现","slug":"实际性能表现","link":"#实际性能表现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1743438265000,"updatedTime":1743438265000,"contributors":[{"name":"lzh","email":"2212384795@qq.com","commits":1}]},"readingTime":{"minutes":3.45,"words":1034},"filePathRelative":"backEnd/MySQL/为什么 MySQL选择使用 B+树作为索引结构.md"}');export{e as data};
